#pragma once
#include <vector>
#include <cstdlib>
#include <fstream>

#ifndef UTILS
#define UTILS

using namespace std;

#define ARGPATH		"-p"
//#define ARGIMAGE	"-i"
#define ARGVIDEO	"-v"
#define ARGINFO		"-info"
//#define ARGNIMAGE	"-ni"
#define ARGNVIDEO	"-nv"
#define ARGNINFO	"-ninfo"
//#define ARGANNOTATE	"-a"
#define ARGLIVE		"-l"
#define ARGFEATURES	"-f"
#define ARGVECPATH	"-vec"
#define ARGSRATIO	"-r"
#define ARGWORKDIR	"-d"
#define ARGNSAMPLES	"-n"
#define ARGSHEIGHT	"-h"
#define ARGSWIDTH	"-w"
#define ARGINTERACT	"-x"

#ifdef _WIN32
	#define PATHSEP "\\"
#else
	#define PATHSEP "/"
#endif

#define ANNOFILE "anno.txt"			// Name of final annotation file for positive samples
#define ANNOMAXWINHEIGHT "1024"		// Positive images with greater height will be shrunk ...
#define ANNORESIZEFACTOR "4"		// ... by this factor (only for viewing)
#define VECFILE "positive.vec"		// Name of vec file generated from positive samples
#define NINFOFILE "bginfo.txt"		// Name of background description file from negative samples
#define FEATUREFILE "cascade.xml"	// Name of classifier generated by traincascade utility

struct Args
{
	bool isLive;
	bool annotate;
	bool interactive;
	int iSamplingRatio;
	int numPSamples;
	int numNSamples;
	int sampleHeight;
	int sampleWidth;
	string videoPath;
	string featurePath;
	string vecPath;
	string workDir;
	string infoPath;
	string nInfoPath;
	vector<string> imagePaths;
	vector<string> videoPaths;
	vector<string> nImagePaths;
	vector<string> nVideoPaths;
};

void initializeArgs(Args& args);
void parseArgs(int argc, char** argv, Args& args);
void printHelp();
void printArgs(Args& args);
void printError(const string error);
void makeDir(string dirPath);
int numLines(string fname);

#endif // !UTILS
